@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@model McAttributes.Pages.UserIssues._AssociatedAccountsModel
@{
}


<div id="associatedPartial" style="margin-top: 1em">

   

    @if (Model.AssociatedUsers.Count() > 0) {
        <p>
            <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#associatedAccountTable"
            aria-expanded="false" aria-controls="associatedAccountTable">
                Show/Hide Accounts Table
            </button>
        </p>
        <div class="collapse" id="associatedAccountTable">
            <table id="accountsTable" class="table table-bordered table-hover">
                <tbody>
                    @foreach (var p in Model.AssociatedUsers.First().GetType().GetProperties().Where(x => x.Name != "Version")) {
                        <tr>
                            <th>@p.Name</th>
                            @foreach (var a in Model.AssociatedUsers.OrderBy(x => x.Tenant)) {
                                <td>@p.GetValue(a)</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else {
        <p>No Associated Accounts Loaded.</p>
        if (Model._acctNames.Count() > 0) {
            <p>@Model._acctNames.Count() account names identified but fetching from database failed.</p>
        }
    }

    <div id="app" class="container-fluid">
        <h2>Accounts</h2>
        <div class="row">
            <div class="col">
                <button @@click="autoBucket()">Auto Bucket</button>
                <button @@click="bucketIndex++">Add Bucket : {{bucketIndex}}</button>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6 card-block">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th v-for="c of columns">{{ c }}</th>
                            <th style="padding-left:1em; padding-right:3em; ">bucket</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="a of bucket.accounts">
                            <td v-for="c of columns" style="white-space:nowrap">{{ a[c] }}</td>
                        <td>
                            <div class="row">
                                <ul style="list-style: none;">
                                    <li class="col" v-for="b of Array(bucketIndex).fill().map((element, index) => index)">
                                        <input type="radio" :id="'bucket' + a.aadId + b" :name="'bucket' + a.aadId + b" :value="b" v-model="a.bucket" style="margin-right:0.5em;" />
                                        <label :for="'bucket' + a.aadId + b" :style="(a.bucket == b) ? { 'font-weight':'bold' } : {}">Bucket {{ b + 1 }}</label>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style type="text/css">
    .drag-el {
        margin-bottom: 1em;
    }
    .drop-zone {
        padding: 1em;
    }
</style>
<script type="text/javascript">

    class AccountBucket {
        constructor(accounts) {
            this.accounts = accounts
            this.accounts.forEach(a => a['bucket'] = 0)
        }
    }

    const bucketAppDefinition = {
        data() {
            return {
                buckets: [],
                bucketIndex: 0,
                columns: ['displayName','tenant','preferredGivenName', 'preferredSurname', 'mail', 'creationType','created'],
                bucket: new AccountBucket(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AssociatedUsers,new JsonSerializerSettings { ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() }})))
            }
        },
        methods: {
            autoBucket () {
                let nativeAccounts = this.bucket.accounts.filter(a => 
                    !(a.creationType != null && a.creationType != undefined)
                        && !(a.upn.startsWith("pa_")) && !(a.upn.startsWith("ta_")) && !(a.upn.startsWith("ra_")) )

                if (nativeAccounts) {
                    this.bucketIndex = nativeAccounts.length
                }

                var boffset = 0;
                for (a of nativeAccounts) {
                    for (b of this.bucket.accounts) {
                        if (b.id === a.id) {
                            b.bucket = boffset
                            continue
                        }
                        
                        if (b.mail == a.mail) {
                            b.bucket = boffset
                        }
                    }
                    boffset++;
                }
            },
            startDrag(evt, item) {
                console.log("Dragging " + item.DisplayName)
                evt.dataTransfer.dropEffect = 'move'
                evt.dataTransfer.effectAllowed = 'move'
                evt.dataTransfer.setData('itemID', item.Id)
            },
            onDrop(evt, list) {
                const itemID = evt.dataTransfer.getData('itemID')
                if (list.name && list.name.startsWith("Bucket")) {

                    console.log(list)
                }
            },
        },
        watch: {
        },
    };

    const bucketApp = createApp(bucketAppDefinition);
    bucketApp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-');
    bucketApp.mount('#app');
</script>
